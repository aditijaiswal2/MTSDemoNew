@page "/lud"


@using ITS.Client.Dialog
@using ITS.Client.Dialog.Users;
@using ITS.Client.Pages.Account;
@using ITS.Client.Utitlity
@using ITS.Shared.DTOs
@using ITS.Shared.Models
@using MudBlazor
@using System.Collections.Generic
@using System.Text
@using ITS.Shared.Entities;

@inherits BaseAuthentication

@inject IDialogService DialogService
@inject IJSRuntime jsRuntime
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject IDialogCompletionService CompletionService

@if (BaseAuthentication.IsAuthenticated)
{
    <MudContainer Class="pa-2" Fixed="true" Style="height: calc(100vh);">
        <MudGrid Class="d-flex justify-content-around">
            <MudItem md="12" sm="12" xs="12" Class="d-flex justify-center align-center mt-4 mb-4">
                <MudText Typo="Typo.h6" Style="font-size: 16px;">LOGIN USERS DETAILS</MudText>
            </MudItem>
            <MudItem md="12" sm="12" xs="12" class="mb-2 ml-2" Style="margin-top:-10px">               
                <div style="max-height: 500px; max-width:100%;">
                    <MudTable Items="@loginUsers" Class="table table-bordered table-striped mt-2">
                        <HeaderContent>
                        <MudTh Style="text-align:center;width:50px">Sl No</MudTh>
                            <MudTh Style="text-align:center;width:150px">User Name</MudTh>                           
                            <MudTh Style="text-align:center;width:200px">Email</MudTh>
                            <MudTh Style="text-align:center;width:250px">Login DateAndTime</MudTh>
                        </HeaderContent>

                    <RowTemplate Context="user">
                        @{
                            
                            int index = loginUsers.ToList().IndexOf(user) + 1;
                        }
                        <MudTd Class="table-data-alignment">@index</MudTd>
                        <MudTd Class="table-data-alignment">@user.UserName</MudTd>
                        <MudTd Class="table-data-alignment">@user.EMail</MudTd>
                        <MudTd Class="table-data-alignment">@user.LoginDateAndTime</MudTd>
                    </RowTemplate>
                          
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 5, 10, 50, 100, int.MaxValue }" />
                        </PagerContent>
                    </MudTable>
                </div>
            </MudItem>
        </MudGrid>
    </MudContainer>
}
else
{
    <AuthenticationErrorPage></AuthenticationErrorPage>
}

<style>
    .text-remove {
        color: red !important;
    }

    .table-data-alignment {
        text-align: center
    }
</style>

@code {
    private IEnumerable<LoginUserDetails> loginUsers = new List <LoginUserDetails>();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
   
    protected override async Task OnInitializedAsync()
    {
        await LoadLoginUser();
    }

    private async Task LoadLoginUser()
    {
        try
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

            var userResponse = await HttpClient.GetAsync("https://localhost:7006/api/LoginUserDetails/Gd");

            if (userResponse.IsSuccessStatusCode)
            {
                var userResult = await userResponse.Content.ReadFromJsonAsync<IEnumerable<LoginUserDetails>>();
                if (userResult != null)
                {
                    loginUsers = userResult.ToList().OrderByDescending(u => u.LoginDateAndTime);
                  
                }
            }
            else
            {
                Snackbar.Add($"Failed to fetch users details: {userResponse.ReasonPhrase}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error Occurred: {ex.Message}", Severity.Warning);
        }
    }

    
}


